1)A threading.Lock is used to restrict access to a section of code (or a resource)
so that only one thread can execute that code (or use the resource) at a time.
Every access to the resource must be protected by a Lock.
2)Python threading is restricted to a single CPU at one time.
The multiprocessing library will allow you to run code on different processors.
3)The .join() method allows one thread to wait for a second thread to complete.
It is done automatically for you when you use a ThreadPoolExecutor as a context manager (a with statement).
4)A race condition is when two threads interfere with each other while accessing a shared resource.
The resource can be a variable in memory, a file, or a physical device like a serial port.
5)Using a ThreadPoolExecutor to manage your threads as a context manager takes care of starting and
waiting for each thread in your pool. It does not, however,
pass exceptions from the Thread pool back to the main program well.
It also does not prevent race conditions.
6)The .cancel() method of the Timer object will stop a running timer(threading.Timer) before it has completed.
